import '@testing-library/jest-dom'
// @ts-ignore
import { parseMultipartForm, sendOrderPlacedEmail } from '../netlify/functions/sendOrderPlacedEmail'
import '@testing-library/jest-dom'
import OfferForm from '../src/components/OrderForm/Index.svelte'
import { render, fireEvent } from '@testing-library/svelte'
import { uploadedForm } from '../mocks/handlers'

const testFile = new File(['(⌐□_□)'], 'chucknorris.png', {
    type: 'image/png'
  })

describe('Place Order', () => {
    const headers = { 'content-type': 'multipart/form-data; boundary=--------------------------586199023953990026653312' }
    const body = "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"
    it('Parses multipart/form to fields and attachments', async () => {
        let parsedData = parseMultipartForm(headers, body)
        expect(parsedData.fields['sender']).toBe("TEST@SENDER.COM")
        expect(parsedData.fields['tier']).toBe("TEST-TIER'")
        expect(parsedData.attachments[0].filename).toBe("test.png")
        expect(parsedData.attachments[0].type).toBe("image/png")
    })

    it('Sends expected model through client', async () => {
        let toEmail = 'to@email.com'
        let fromEmail = 'from@email.com'
        let expectedSubject = 'New order from TEST@SENDER.COM'
        let expectedHtmlLine1 = `<h1>New order</h1>`
        let expectedHtmlLine2 = `<div>Contact email: TEST@SENDER.COM</div>`
        let expectedHtmlLine3 = `<div>Tier: TEST-TIER'</div>`

        let expectedBase64Content = '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'
        let parts = {
            attachments: [{
                content: Buffer.from('UVdFUlRZ', 'base64'),
                filename: 'test.png',
                type: 'image/png'
            }],
            fields: {
                tier: "TEST-TIER'",
                sender: 'TEST@SENDER.COM'
            }
        }
        let result: any 

        let sendFunc = (data: any) => result = data

        await sendOrderPlacedEmail(sendFunc, headers, body, toEmail, fromEmail )
        expect(result.to).toBe(toEmail)
        expect(result.from).toBe(fromEmail)
        expect(result.subject).toBe(expectedSubject)
        expect(result.html).toContain(expectedHtmlLine1)
        expect(result.html).toContain(expectedHtmlLine2)
        expect(result.html).toContain(expectedHtmlLine3)
        expect(result.attachments[0].content).toBe(expectedBase64Content)
        expect(result.attachments[0].filename).toBe(parts.attachments[0].filename)
        expect(result.attachments[0].type).toBe(parts.attachments[0].type)
        expect(result.attachments[0].disposition).toBe("attachment")
    })
})